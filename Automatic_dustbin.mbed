 *  Automatic Dustbin
 *  MEF University
 *  Talha Güzel
 */

#include <Servo.h> // include servo library to use its related functions
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif
#define Servo_PWM 6 // A descriptive name for D6 pin of Arduino to provide PWM signal
#define PIN       9 // On Trinket or Gemma, suggest changing this to 1
#define NUMPIXELS 16 // Popular NeoPixel ring size
#define echoPin 2 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 3 //attach pin D3 Arduino to pin Trig of HC-SR04
#define DELAYVAL 500 // Time (in milliseconds) to pause between pixels

Servo MG995_Servo;  // Define an instance of of Servo with the name of "MG995_Servo"

int endstop_1 = 5;
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement
int open=0;
int average =0;
int averagenumber=0;
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<pixels.numPixels(); i++) { 
    pixels.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    pixels.show();                          //  Update strip to match
    delay(wait);                            //  Pause for a moment
  }
}
void lidopen(){
  if(open==0){
    MG995_Servo.detach();
 MG995_Servo.attach(Servo_PWM, 520, 520);
 MG995_Servo.write(0); // set servo to mid-point (90°)
}
open=1;
}
void lidclose(){
  if(open==1){
    MG995_Servo.detach();
 MG995_Servo.attach(Servo_PWM, 520, 520); 
 MG995_Servo.write(20); // set servo to mid-point (90°)
}
open=0;
}
void setup()
{
 pixels.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  pixels.show();            // Turn OFF all pixels ASAP
  pixels.setBrightness(200);
 MG995_Servo.attach(Servo_PWM, 520, 520);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
pinMode(endstop_1, INPUT);
 Serial.begin(9600);
MG995_Servo.write(0); // set servo to mid-point (90°)
delay(1000);
  while(digitalRead(endstop_1) != LOW);{       
  }
   Serial.println("endstop_1 pressed");
        open=0;
       for(int i=0;i<20;i++){
       MG995_Servo.write(i); // set servo to mid-point (90°)
       delay(100);
       }
       delay(100);
       MG995_Servo.detach(); // set servo to mid-point (90°)
  pixels.clear(); // Set all pixel colors to 'off'
    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255
    // Here we're using a moderately bright green color:
 rainbowFade2White(3, 3, 1);
}
void loop() {
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  average +=distance;
  averagenumber +=1;
  if(averagenumber==10){
    int totaldistance= average/averagenumber;
     Serial.println("Distance: " + String(totaldistance));
     if((totaldistance)<15){
  if(open==1){
  }else{
      colorWipe(pixels.Color(255,   0,   0)     , 50); // Red
  lidopen();
  delay(7000);
  }
 }
 if(totaldistance>15){
  if(open==0){
  }else{
     colorWipe(pixels.Color(  0,   0, 255)     , 50); // Blue
  ();
  }
 }
 average =0;
 averagenumber=0;
  }
 delay(25);
  }
   void rainbowFade2White(int wait, int rainbowLoops, int whiteLoops) {
  int fadeVal=0, fadeMax=100;
  for(uint32_t firstPixelHue = 0; firstPixelHue < rainbowLoops*65536;
    firstPixelHue += 256) {
    for(int i=0; i<pixels.numPixels(); i++) { 
      uint32_t pixelHue = firstPixelHue + (i * 65536L / pixels.numPixels());
      pixels.setPixelColor(i, pixels.gamma32(pixels.ColorHSV(pixelHue, 255,
        255 * fadeVal / fadeMax)));
    }
    pixels.show();
    delay(wait);
    if(firstPixelHue < 65536) {                              // First loop,
      if(fadeVal < fadeMax) fadeVal++;                       // fade in
    } else if(firstPixelHue >= ((rainbowLoops-1) * 65536)) { // Last loop,
      if(fadeVal > 0) fadeVal--;                             // fade out
    } else {
      fadeVal = fadeMax; // Interim loop, make sure fade is at max
    }
  }
  for(int k=0; k<whiteLoops; k++) {
    for(int j=0; j<256; j++) { // Ramp up 0 to 255
      pixels.fill(pixels.Color(0, 0, 0, pixels.gamma8(j)));
      pixels.show();
    }
    delay(1000); // Pause 1 second
    for(int j=255; j>=0; j--) { // Ramp down 255 to 0
      pixels.fill(pixels.Color(0, 0, 0, pixels.gamma8(j)));
      pixels.show();
    }
  }
  delay(500); // Pause 1/2 second
}
